---
interface Props {
    title: string;
}

const {title} = Astro.props;
import {ViewTransitions} from 'astro:transitions';
import Header from "../components/Header.astro";
import Footer from "../components/Footer.astro";

import { AstroFont } from 'astro-font';
---

<!doctype html>
<html lang="en">
<head>
    <meta charset="UTF-8"/>
    <meta name="description" content="Astro description"/>
    <meta name="viewport" content="width=device-width"/>
    <link rel="icon" type="image/svg+xml" href="/Assets/favicon.svg"/>
    <meta name="generator" content={Astro.generator}/>
    <meta property="og:title" content="RevenzMind"/>
    <meta property="og:type" content="website"/>
    <meta property="og:url" content="https://revenzmind.vercel.app/"/>
    <meta property="og:image" content="https://japi.rest/discord/v1/user/1149804799877972059/avatar"/>
    <meta property="og:description" content="ðŸ˜ºðŸ’– wanna see my website"/>
    <meta name="theme-color" content="#000000">
    <AstroFont
        config={[
            {
                src: [],
                name: "Inter",
                preload: true,
                display: "swap",
                selector: "html",
                fallback: "sans-serif",
                googleFontsURL: 'https://fonts.googleapis.com/css2?family=Inter:wght@300;400;500&display=swap',
            }
        ]}
    />
    <title>{title}</title>
    <ViewTransitions/>

</head>
<body>


<Header/>
    <video id="backgroundVideo" loop muted  autoplay class="vidbkg"  src="https://cdnn.rawen.cat/r/len.mp4"></video>

<main>
    <slot/>
</main>
<Footer/>

</body>

</html>

<style is:global>

    * {
        cursor: none !important;
        margin: 0;
        box-sizing: border-box;
    }


    .vidbkg{
        position: fixed;
        right: 0;
        bottom: 0;
        min-width: 100%;
        min-height: 100%;
        width: auto;
        height: auto;
        z-index: -100;
        background-size: cover;
        filter: brightness(.11);
    }

    :root {

        --background: #0c0c0c;
        --navbar-background: rgba(13, 13, 13, 0.445);
    

        --background-component: #0f0f0f63;
        --background-component-selected: #1a1a1a63;
        --background-style-color: #242424;
        --accent-color: #b8b8b8;
        --border-color: #1c1d20;
    }

    ::-webkit-scrollbar {
        visibility: hidden;
    }

    html {
        background: var(--background);
        background-image: radial-gradient(
                circle at 0 0,
                var(--background-style-color) 1px,
                transparent 1px
        );
        background-size: 16px 16px;
        display: flex;
        flex-direction: column;
        justify-content: center;
        align-items: center;
    }

    body {
        width: 100%;
        max-width: 1440px;
        margin: 0 auto;
        padding: 0 2rem;
    }

    body, html {
        height: 100%;
    }

    /*Slot CSS Styles */
    main {
        margin-top: 90px;
        min-height: 72vh;
        display: grid;
        grid-template-columns: repeat(12, 1fr);
        gap: 2rem;
    }

    main > * {
        grid-column: 1 / -1;
    }

    @media (max-width: 768px) {
        body {
            padding: 0 1rem;
        }

        main {
            gap: 1rem;
        }
    }

    hr {
        height: 1px;
        border: 0;
        width: 100%;
        margin-top: 20px;
        margin-bottom: 20px;
        background-image: -webkit-linear-gradient(
                left,
                transparent,
                var(--border-color),
                transparent
        );
    }
</style>


<style is:global>
    [data-tooltip]:before {
        /* needed - do not touch */
        content: attr(data-tooltip);
        position: absolute;
        opacity: 0;

        /* customizable */
        font-size: 0.7rem;
        transition: all 0.15s ease;
        padding: 10px;
        color: rgb(156, 156, 156);
        border: 1px solid var(--border-color);

        border-radius: 1vh;
    }

    [data-tooltip]:hover:before {
        /* needed - do not touch */
        opacity: 1;

        /* customizable */
        background: var(--background-component-selected);
        backdrop-filter: blur(10px);
    }

    [data-tooltip]:not([data-tooltip-persistent]):before {
        pointer-events: none;
    }
</style>


<style is:global>
    .cursor {
        border: 1px solid var(--border-color);
        position: fixed;
        top: 0;
        left: 0;
        width: 20px;
        height: 20px;
        pointer-events: none;
        transform: translate(-50%, -50%);
        border-radius: 10%;
        background-color: var(--background-component);
        backdrop-filter: blur(1px);
        z-index: 10000;
    }

    .cursor_pointer {
        width: 5px;
        height: 5px;
        border-radius: 50%;
        background-color: var(--accent-color);
        position: fixed;
        top: 0;
        left: 0;
        transform: translate(-50%, -50%);
        pointer-events: none;
    }
</style>
<script is:inline>
    document.addEventListener('astro:page-load', () => {
        const isDesktop = ["windows", "macintosh", "x11"].some(keyword => navigator.userAgent.toLowerCase().includes(keyword));

        if (isDesktop) {
            let cursor = Object.assign(document.createElement("div"), {className: "cursor"});
            let pointer = Object.assign(document.createElement("div"), {className: "cursor_pointer"});
            document.body.append(cursor, pointer);

            let mouseX = 0, mouseY = 0;

            const updateCursor = () => {
                cursor.style.left = `${mouseX}px`;
                cursor.style.top = `${mouseY}px`;
                pointer.style.left = `${mouseX}px`;
                pointer.style.top = `${mouseY}px`;

                requestAnimationFrame(updateCursor);
            };

            document.addEventListener("mousemove", (e) => {
                mouseX = e.clientX;
                mouseY = e.clientY;
            });

            requestAnimationFrame(updateCursor);
        }
    });
</script>
